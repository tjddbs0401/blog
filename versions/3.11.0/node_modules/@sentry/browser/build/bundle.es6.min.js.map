{"version":3,"file":"bundle.es6.min.js","sources":["../../types/src/loglevel.ts","../../types/src/severity.ts","../../types/src/span.ts","../../types/src/status.ts","../../utils/src/polyfill.ts","../../utils/src/error.ts","../../utils/src/is.ts","../../utils/src/string.ts","../../utils/src/misc.ts","../../utils/src/logger.ts","../../utils/src/memo.ts","../../utils/src/object.ts","../../utils/src/syncpromise.ts","../../utils/src/promisebuffer.ts","../../utils/src/supports.ts","../../utils/src/instrument.ts","../../utils/src/dsn.ts","../../hub/src/scope.ts","../../hub/src/hub.ts","../../minimal/src/index.ts","../../core/src/api.ts","../../core/src/integration.ts","../../core/src/baseclient.ts","../../core/src/transports/noop.ts","../../core/src/basebackend.ts","../../core/src/integrations/functiontostring.ts","../../core/src/integrations/inboundfilters.ts","../src/tracekit.ts","../src/parsers.ts","../src/eventbuilder.ts","../src/transports/base.ts","../src/transports/fetch.ts","../src/transports/xhr.ts","../src/backend.ts","../src/version.ts","../src/client.ts","../src/helpers.ts","../src/integrations/globalhandlers.ts","../src/integrations/trycatch.ts","../src/integrations/breadcrumbs.ts","../src/integrations/linkederrors.ts","../src/integrations/useragent.ts","../src/sdk.ts","../src/index.ts","../../core/src/sdk.ts"],"sourcesContent":["/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n","/** JSDoc */\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n// tslint:disable:completed-docs\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** Span holding trace_id, span_id */\nexport interface Span {\n  /** Sets the finish timestamp on the current span and sends it if it was a transaction */\n  finish(useLastSpanTimestamp?: boolean): string | undefined;\n  /** Return a traceparent compatible header string */\n  toTraceparent(): string;\n  /** Convert the object to JSON for w. spans array info only */\n  getTraceContext(): object;\n  /** Convert the object to JSON */\n  toJSON(): object;\n\n  /**\n   * Sets the tag attribute on the current span\n   * @param key Tag key\n   * @param value Tag value\n   */\n  setTag(key: string, value: string): this;\n\n  /**\n   * Sets the data attribute on the current span\n   * @param key Data key\n   * @param value Data value\n   */\n  setData(key: string, value: any): this;\n\n  /**\n   * Sets the status attribute on the current span\n   * @param status http code used to set the status\n   */\n  setStatus(status: SpanStatus): this;\n\n  /**\n   * Sets the status attribute on the current span based on the http code\n   * @param httpStatus http code used to set the status\n   */\n  setHttpStatus(httpStatus: number): this;\n\n  /**\n   * Determines whether span was successful (HTTP200)\n   */\n  isSuccess(): boolean;\n}\n\n/** Interface holder all properties that can be set on a Span on creation. */\nexport interface SpanContext {\n  /**\n   * Description of the Span.\n   */\n  description?: string;\n  /**\n   * Operation of the Span.\n   */\n  op?: string;\n  /**\n   * Completion status of the Span.\n   */\n  status?: SpanStatus;\n  /**\n   * Parent Span ID\n   */\n  parentSpanId?: string;\n  /**\n   * Has the sampling decision been made?\n   */\n  sampled?: boolean;\n  /**\n   * Span ID\n   */\n  spanId?: string;\n  /**\n   * Trace ID\n   */\n  traceId?: string;\n  /**\n   * Transaction of the Span.\n   */\n  transaction?: string;\n  /**\n   * Tags of the Span.\n   */\n  tags?: { [key: string]: string };\n\n  /**\n   * Data of the Span.\n   */\n  data?: { [key: string]: any };\n}\n\n/** The status of an Span. */\nexport enum SpanStatus {\n  /** The operation completed successfully. */\n  Ok = 'ok',\n  /** Deadline expired before operation could complete. */\n  DeadlineExceeded = 'deadline_exceeded',\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  Unauthenticated = 'unauthenticated',\n  /** 403 Forbidden */\n  PermissionDenied = 'permission_denied',\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  NotFound = 'not_found',\n  /** 429 Too Many Requests */\n  ResourceExhausted = 'resource_exhausted',\n  /** Client specified an invalid argument. 4xx. */\n  InvalidArgument = 'invalid_argument',\n  /** 501 Not Implemented */\n  Unimplemented = 'unimplemented',\n  /** 503 Service Unavailable */\n  Unavailable = 'unavailable',\n  /** Other/generic 5xx. */\n  InternalError = 'internal_error',\n  /** Unknown. Any non-standard HTTP status code. */\n  UnknownError = 'unknown_error',\n  /** The operation was cancelled (typically by the user). */\n  Cancelled = 'cancelled',\n  /** Already exists (409) */\n  AlreadyExists = 'already_exists',\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  FailedPrecondition = 'failed_precondition',\n  /** The operation was aborted, typically due to a concurrency issue. */\n  Aborted = 'aborted',\n  /** Operation was attempted past the valid range. */\n  OutOfRange = 'out_of_range',\n  /** Unrecoverable data loss or corruption */\n  DataLoss = 'data_loss',\n}\n\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace SpanStatus {\n  /**\n   * Converts a HTTP status code into a {@link SpanStatus}.\n   *\n   * @param httpStatus The HTTP response status code.\n   * @returns The span status or {@link SpanStatus.UnknownError}.\n   */\n  // tslint:disable-next-line:completed-docs\n  export function fromHttpCode(httpStatus: number): SpanStatus {\n    if (httpStatus < 400) {\n      return SpanStatus.Ok;\n    }\n\n    if (httpStatus >= 400 && httpStatus < 500) {\n      switch (httpStatus) {\n        case 401:\n          return SpanStatus.Unauthenticated;\n        case 403:\n          return SpanStatus.PermissionDenied;\n        case 404:\n          return SpanStatus.NotFound;\n        case 409:\n          return SpanStatus.AlreadyExists;\n        case 413:\n          return SpanStatus.FailedPrecondition;\n        case 429:\n          return SpanStatus.ResourceExhausted;\n        default:\n          return SpanStatus.InvalidArgument;\n      }\n    }\n\n    if (httpStatus >= 500 && httpStatus < 600) {\n      switch (httpStatus) {\n        case 501:\n          return SpanStatus.Unimplemented;\n        case 503:\n          return SpanStatus.Unavailable;\n        case 504:\n          return SpanStatus.DeadlineExceeded;\n        default:\n          return SpanStatus.InternalError;\n      }\n    }\n\n    return SpanStatus.UnknownError;\n  }\n}\n","/** The status of an event. */\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n// tslint:disable:completed-docs\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties); // tslint:disable-line:no-unbound-method\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    if (!obj.hasOwnProperty(prop)) {\n      // @ts-ignore\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    // tslint:disable:no-unsafe-any\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): boolean {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: any): boolean {\n  // tslint:disable-next-line:strict-type-predicates\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: any): boolean {\n  // tslint:disable-next-line:strict-type-predicates\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // tslint:disable:no-unsafe-any\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n  // tslint:enable:no-unsafe-any\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  // tslint:disable-next-line:no-unsafe-any\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    // tslint:disable-next-line:no-unsafe-any\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { isRegExp } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    colno = ll; // tslint:disable-line:no-parameter-reassignment\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n","import { Event, Integration, StackFrame, WrappedFunction } from '@sentry/types';\n\nimport { isString } from './is';\nimport { snipLine } from './string';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\n/**\n * Requires a module which is protected _against bundler minification.\n *\n * @param request The module path to resolve\n */\nexport function dynamicRequire(mod: any, request: string): any {\n  // tslint:disable-next-line: no-unsafe-any\n  return mod.require(request);\n}\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // tslint:disable:strict-type-predicates\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n// tslint:enable:strict-type-predicates\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // tslint:disable-next-line:no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // tslint:disable-next-line:no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // tslint:disable-next-line:no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    if (level in global.console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\nexport function addExceptionMechanism(\n  event: Event,\n  mechanism: {\n    [key: string]: any;\n  } = {},\n): void {\n  // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n  try {\n    // @ts-ignore\n    // tslint:disable:no-non-null-assertion\n    event.exception!.values![0].mechanism = event.exception!.values![0].mechanism || {};\n    Object.keys(mechanism).forEach(key => {\n      // @ts-ignore\n      event.exception!.values![0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {\n    // no-empty\n  }\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown): string {\n  const elem = el as {\n    getAttribute(key: string): string; // tslint:disable-line:completed-docs\n    tagName?: string;\n    id?: string;\n    className?: string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const attrWhitelist = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * Returns a timestamp in seconds with milliseconds precision.\n */\nexport function timestampWithMs(): number {\n  return Date.now() / 1000;\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\nconst defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\nexport function parseRetryAfterHeader(now: number, header?: string | number | null): number {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n","import { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","// tslint:disable:no-unsafe-any\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly _hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly _inner: any;\n\n  public constructor() {\n    // tslint:disable-next-line\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n      this._inner.add(obj);\n      return false;\n    }\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < this._inner.length; i++) {\n      const value = this._inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    this._inner.push(obj);\n    return false;\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (let i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","import { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName, htmlTreeAsString } from './misc';\nimport { truncate } from './string';\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacement: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacement(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(\n      // tslint:disable-next-line:no-unsafe-any\n      key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`,\n    )\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all it's attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      stack: string | undefined;\n      message: string;\n      name: string;\n      [key: string]: any;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    source.type = event.type;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(event.target)\n        ? htmlTreeAsString(event.target)\n        : Object.prototype.toString.call(event.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event.currentTarget)\n        ? htmlTreeAsString(event.currentTarget)\n        : Object.prototype.toString.call(event.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    // tslint:disable-next-line:strict-type-predicates\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event.detail;\n    }\n\n    for (const i in event) {\n      if (Object.prototype.hasOwnProperty.call(event, i)) {\n        source[i] = event;\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // tslint:disable-next-line:no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/** Transforms any input value into a string form, either primitive value or a type of the input */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\n// tslint:disable-next-line:cyclomatic-complexity\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  // tslint:disable-next-line:no-tautology-expression\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  // If value implements `toJSON` method, call it and return early\n  // tslint:disable:no-unsafe-any\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  // tslint:enable:no-unsafe-any\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\nexport function normalize(input: any, depth?: number): any {\n  try {\n    // tslint:disable-next-line:no-unsafe-any\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  // tslint:disable:strict-type-predicates\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const obj = val as { [key: string]: any };\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(obj)) {\n      if (typeof obj[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(obj[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return val.map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n","import { isThenable } from './is';\n\n/** SyncPromise internal states */\nenum States {\n  /** Pending */\n  PENDING = 'PENDING',\n  /** Resolved / OK */\n  RESOLVED = 'RESOLVED',\n  /** Rejected / Error */\n  REJECTED = 'REJECTED',\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<{\n    onfulfilled?: ((value: T) => T | PromiseLike<T>) | null;\n    onrejected?: ((reason: any) => any) | null;\n  }> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return '[object SyncPromise]';\n  }\n\n  /** JSDoc */\n  public static resolve<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n    return new SyncPromise(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<T = never>(reason?: any): PromiseLike<T> {\n    return new SyncPromise((_, reject) => {\n      reject(reason);\n    });\n  }\n\n  /** JSDoc */\n  public static all<U = any>(collection: Array<U | PromiseLike<U>>): PromiseLike<U[]> {\n    return new SyncPromise<U[]>((resolve, reject) => {\n      if (!Array.isArray(collection)) {\n        reject(new TypeError(`Promise.all requires an array as input.`));\n        return;\n      }\n\n      if (collection.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      let counter = collection.length;\n      const resolvedCollection: U[] = [];\n\n      collection.forEach((item, index) => {\n        SyncPromise.resolve(item)\n          .then(value => {\n            resolvedCollection[index] = value;\n            counter -= 1;\n\n            if (counter !== 0) {\n              return;\n            }\n            resolve(resolvedCollection);\n          })\n          .then(null, reject);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._attachHandler({\n        onfulfilled: result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onrejected: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        // tslint:disable-next-line:no-unsafe-any\n        resolve(val);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  // TODO: FIXME\n  /** JSDoc */\n  private readonly _attachHandler = (handler: {\n    /** JSDoc */\n    onfulfilled?(value: T): any;\n    /** JSDoc */\n    onrejected?(reason: any): any;\n  }) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    if (this._state === States.REJECTED) {\n      this._handlers.forEach(handler => {\n        if (handler.onrejected) {\n          handler.onrejected(this._value);\n        }\n      });\n    } else {\n      this._handlers.forEach(handler => {\n        if (handler.onfulfilled) {\n          // tslint:disable-next-line:no-unsafe-any\n          handler.onfulfilled(this._value);\n        }\n      });\n    }\n\n    this._handlers = [];\n  };\n}\n\nexport { SyncPromise };\n","import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  public constructor(protected _limit?: number) {}\n\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    // tslint:disable:no-unused-expression\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // It really needs 1 argument, not 0.\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore\n    // tslint:disable:no-unused-expression\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    // tslint:disable:no-unused-expression\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    // tslint:disable-next-line:no-unused-expression\n    new Headers();\n    // tslint:disable-next-line:no-unused-expression\n    new Request('');\n    // tslint:disable-next-line:no-unused-expression\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\nfunction isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // tslint:disable-next-line:no-unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  if (doc) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // tslint:disable-next-line:no-unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  // tslint:disable-next-line: no-unsafe-any\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    // tslint:disable:no-unused-expression\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  const chrome = (global as any).chrome;\n  // tslint:disable-next-line:no-unsafe-any\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* tslint:disable:only-arrow-functions no-unsafe-any */\n\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getFunctionName, getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType = 'console' | 'dom' | 'fetch' | 'history' | 'sentry' | 'xhr';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  // tslint:disable-next-line:strict-type-predicates\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const commonHandlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...commonHandlerData,\n      });\n\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...commonHandlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...commonHandlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          throw error;\n        },\n      );\n    };\n  });\n}\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n  };\n}\n\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const url = args[1];\n      this.__sentry_xhr__ = {\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      if (isString(url) && this.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n\n      return originalOpen.apply(this, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const xhr = this; // tslint:disable-line:no-this-assignment\n      const commonHandlerData = {\n        args,\n        startTimestamp: Date.now(),\n        xhr,\n      };\n\n      triggerHandlers('xhr', {\n        ...commonHandlerData,\n      });\n\n      xhr.addEventListener('readystatechange', function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n          triggerHandlers('xhr', {\n            ...commonHandlerData,\n            endTimestamp: Date.now(),\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n  // to the document. Do this before we instrument addEventListener.\n  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);\n  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false);\n\n  // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerOrEventListenerObject, capture?: boolean, secure?: boolean) => void {\n        if (fn && (fn as EventListenerObject).handleEvent) {\n          if (eventName === 'click') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n          if (eventName === 'keypress') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n        } else {\n          if (eventName === 'click') {\n            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);\n          }\n          if (eventName === 'keypress') {\n            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);\n          }\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (\n      this: any,\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        let callback = fn as WrappedFunction;\n        try {\n          callback = callback && (callback.__sentry_wrapped__ || callback);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, callback, options);\n      };\n    });\n  });\n}\n\nconst debounceDuration: number = 1000;\nlet debounceTimer: number = 0;\nlet keypressTimeout: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param name the event name (e.g. \"click\")\n * @param handler function that will be triggered\n * @param debounce decides whether it should wait till another event loop\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction domEventHandler(name: string, handler: Function, debounce: boolean = false): (event: Event) => void {\n  return (event: Event) => {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined;\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(() => {\n        handler({ event, name });\n      });\n    } else {\n      handler({ event, name });\n    }\n  };\n}\n\n/**\n * Wraps addEventListener to capture keypress UI events\n * @param handler function that will be triggered\n * @returns wrapped keypress events handler\n * @hidden\n */\nfunction keypressEventHandler(handler: Function): (event: Event) => void {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return (event: Event) => {\n    let target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    const tagName = target && (target as HTMLElement).tagName;\n\n    // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n    if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !(target as HTMLElement).isContentEditable)) {\n      return;\n    }\n\n    // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n    if (!keypressTimeout) {\n      domEventHandler('input', handler)(event);\n    }\n    clearTimeout(keypressTimeout);\n\n    keypressTimeout = (setTimeout(() => {\n      keypressTimeout = undefined;\n    }, debounceDuration) as any) as number;\n  };\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w\\.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** private _authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private _representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    // tslint:disable-next-line:no-this-assignment\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'user', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(ERROR_MESSAGE);\n      }\n    });\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n  }\n}\n","import {\n  Breadcrumb,\n  Event,\n  EventHint,\n  EventProcessor,\n  Scope as ScopeInterface,\n  Severity,\n  Span,\n  User,\n} from '@sentry/types';\nimport { getGlobalObject, isThenable, SyncPromise, timestampWithMs } from '@sentry/utils';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: string } = {};\n\n  /** Extra */\n  protected _extra: { [key: string]: any } = {};\n\n  /** Contexts */\n  protected _context: { [key: string]: any } = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction */\n  protected _transaction?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      setTimeout(() => {\n        this._scopeListeners.forEach(callback => {\n          callback(this);\n        });\n        this._notifyingListeners = false;\n      });\n    }\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      // tslint:disable-next-line:strict-type-predicates\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: { [key: string]: any }): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: any): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransaction(transaction?: string): this {\n    this._transaction = transaction;\n    if (this._span) {\n      (this._span as any).transaction = transaction;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: { [key: string]: any } | null): this {\n    this._context = { ...this._context, [key]: context };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Internal getter for Span, used in Hub.\n   * @hidden\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._context = { ...scope._context };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._transaction = scope._transaction;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._context = {};\n    this._level = undefined;\n    this._transaction = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: timestampWithMs(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._context && Object.keys(this._context).length) {\n      event.contexts = { ...this._context, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transaction) {\n      event.transaction = this._transaction;\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  const global = getGlobalObject<Window | NodeJS.Global>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","import {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  Event,\n  EventHint,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Severity,\n  Span,\n  SpanContext,\n  User,\n} from '@sentry/types';\nimport {\n  consoleSandbox,\n  dynamicRequire,\n  getGlobalObject,\n  isNodeEnv,\n  logger,\n  timestampWithMs,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Carrier, Layer } from './interfaces';\nimport { Scope } from './scope';\n\ndeclare module 'domain' {\n  export let active: Domain;\n  /**\n   * Extension for domain interface\n   */\n  export interface Domain {\n    __SENTRY__?: Carrier;\n  }\n}\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be incresed when the global interface\n * changes a and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 3;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack.push({ client, scope });\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      (top.client as any)[method](...args, top.scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const stack = this.getStack();\n    const parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;\n    const scope = Scope.clone(parentScope);\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    return this.getStack().pop() !== undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const top = this.getStackTop();\n\n    if (!top.scope || !top.client) {\n      return;\n    }\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (top.client.getOptions && top.client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) {\n      return;\n    }\n\n    const timestamp = timestampWithMs();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) {\n      return;\n    }\n\n    top.scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: { [key: string]: any }): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: any): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const top = this.getStackTop();\n    if (top.scope && top.client) {\n      callback(top.scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) {\n      return null;\n    }\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(spanOrSpanContext?: Span | SpanContext, forceNoChild: boolean = false): Span {\n    return this._callExtensionMethod<Span>('startSpan', spanOrSpanContext, forceNoChild);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    // tslint:disable-next-line: strict-type-predicates\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/** Returns the global shim registry. */\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, fallback to the registry if one doesnt exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    // We need to use `dynamicRequire` because `require` on it's own will be optimized by webpack.\n    // We do not want this to happen, we need to try to `require` the domain node module and fail if we are in browser\n    // for example so we do not have to shim it and use `getCurrentHub` universally.\n    const domain = dynamicRequire(module, 'domain');\n    const activeDomain = domain.active;\n\n    // If there no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or its an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return carrier.__SENTRY__.hub;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) {\n    return false;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport { Breadcrumb, Event, Severity, User } from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // tslint:disable-next-line:no-unsafe-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\nexport function captureException(exception: any): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, level?: Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normailzed.\n */\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: { [key: string]: any }): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: string }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normailzed.\n */\n\nexport function setExtra(key: string, extra: any): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n * @param key String key of tag\n * @param value String value of tag\n */\nexport function setTag(key: string, value: string): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n","import { DsnLike } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns a string with auth headers in the url to the store endpoint. */\n  public getStoreEndpoint(): string {\n    return `${this._getBaseUrl()}${this.getStoreEndpointPath()}`;\n  }\n\n  /** Returns the store endpoint with auth added in url encoded. */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      sentry_key: dsn.user, // sentry_key is currently used in tracing integration to identify internal sentry requests\n      sentry_version: SENTRY_API_VERSION,\n    };\n    // Auth is intentionally sent as part of query string (NOT as custom HTTP header)\n    // to avoid preflight CORS requests\n    return `${this.getStoreEndpoint()}?${urlEncode(auth)}`;\n  }\n\n  /** Returns the base path of the url including the port. */\n  private _getBaseUrl(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /** Returns an object that can be used in request headers. */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this._getBaseUrl()}${dsn.path ? `/${dsn.path}` : ''}/api/embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = [...defaultIntegrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n","import { Scope } from '@sentry/hub';\nimport { Client, Event, EventHint, Integration, IntegrationClass, Options, SdkInfo, Severity } from '@sentry/types';\nimport { Dsn, isPrimitive, isThenable, logger, normalize, SyncPromise, truncate, uuid4 } from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the enviornment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected readonly _integrations: IntegrationIndex = {};\n\n  /** Is the client still processing a call? */\n  protected _processing: boolean = false;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._getBackend()\n      .eventFromException(exception, hint)\n      .then(event => this._processEvent(event, hint, scope))\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._processing = true;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(`${message}`, level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    promisedEvent\n      .then(event => this._processEvent(event, hint, scope))\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._processEvent(event, hint, scope)\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(status => {\n      clearInterval(status.interval);\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => status.ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegrations(): IntegrationIndex {\n    return this._integrations || {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<{ ready: boolean; interval: number }> {\n    return new SyncPromise<{ ready: boolean; interval: number }>(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      let interval = 0;\n      clearInterval(interval);\n\n      interval = (setInterval(() => {\n        if (!this._processing) {\n          resolve({\n            interval,\n            ready: true,\n          });\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            resolve({\n              interval,\n              ready: false,\n            });\n          }\n        }\n      }, tick) as unknown) as number;\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { environment, release, dist, maxValueLength = 250, normalizeDepth = 3 } = this.getOptions();\n\n    const prepared: Event = { ...event };\n    if (prepared.environment === undefined && environment !== undefined) {\n      prepared.environment = environment;\n    }\n    if (prepared.release === undefined && release !== undefined) {\n      prepared.release = release;\n    }\n\n    if (prepared.dist === undefined && dist !== undefined) {\n      prepared.dist = dist;\n    }\n\n    if (prepared.message) {\n      prepared.message = truncate(prepared.message, maxValueLength);\n    }\n\n    const exception = prepared.exception && prepared.exception.values && prepared.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = prepared.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n\n    if (prepared.event_id === undefined) {\n      prepared.event_id = hint && hint.event_id ? hint.event_id : uuid4();\n    }\n\n    this._addIntegrations(prepared.sdk);\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (scope) {\n      // In case we have a hub we reassign it.\n      result = scope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      // tslint:disable-next-line:strict-type-predicates\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    // tslint:disable:no-unsafe-any\n    return {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  protected _addIntegrations(sdkInfo?: SdkInfo): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject('SDK not enabled, will not send event.');\n    }\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    if (typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject('This event has been sampled, will not send event.');\n    }\n\n    return new SyncPromise((resolve, reject) => {\n      this._prepareEvent(event, scope, hint)\n        .then(prepared => {\n          if (prepared === null) {\n            reject('An event processor returned null, will not send event.');\n            return;\n          }\n\n          let finalEvent: Event | null = prepared;\n\n          const isInternalException = hint && hint.data && (hint.data as { [key: string]: any }).__sentry__ === true;\n          if (isInternalException || !beforeSend) {\n            this._getBackend().sendEvent(finalEvent);\n            resolve(finalEvent);\n            return;\n          }\n\n          const beforeSendResult = beforeSend(prepared, hint);\n          // tslint:disable-next-line:strict-type-predicates\n          if (typeof beforeSendResult === 'undefined') {\n            logger.error('`beforeSend` method has to return `null` or a valid event.');\n          } else if (isThenable(beforeSendResult)) {\n            this._handleAsyncBeforeSend(beforeSendResult as PromiseLike<Event | null>, resolve, reject);\n          } else {\n            finalEvent = beforeSendResult as Event | null;\n\n            if (finalEvent === null) {\n              logger.log('`beforeSend` returned `null`, will not send event.');\n              resolve(null);\n              return;\n            }\n\n            // From here on we are really async\n            this._getBackend().sendEvent(finalEvent);\n            resolve(finalEvent);\n          }\n        })\n        .then(null, reason => {\n          this.captureException(reason, {\n            data: {\n              __sentry__: true,\n            },\n            originalException: reason as Error,\n          });\n          reject(\n            `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n          );\n        });\n    });\n  }\n\n  /**\n   * Resolves before send Promise and calls resolve/reject on parent SyncPromise.\n   */\n  private _handleAsyncBeforeSend(\n    beforeSend: PromiseLike<Event | null>,\n    resolve: (event: Event) => void,\n    reject: (reason: string) => void,\n  ): void {\n    beforeSend\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          reject('`beforeSend` returned `null`, will not send event.');\n          return;\n        }\n        // From here on we are really async\n        this._getBackend().sendEvent(processedEvent);\n        resolve(processedEvent);\n      })\n      .then(null, e => {\n        reject(`beforeSend rejected with ${e}`);\n      });\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return SyncPromise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return SyncPromise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instanciate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instanciate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    originalFunctionToString = Function.prototype.toString;\n\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      // tslint:disable-next-line:no-unsafe-any\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  blacklistUrls?: Array<string | RegExp>;\n  ignoreErrors?: Array<string | RegExp>;\n  ignoreInternal?: boolean;\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  public constructor(private readonly _options: InboundFiltersOptions = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        const options = self._mergeOptions(clientOptions);\n        if (self._shouldDropEvent(event, options)) {\n          return null;\n        }\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: InboundFiltersOptions): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isBlacklistedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`blacklistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isWhitelistedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`whitelistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: InboundFiltersOptions = {}): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return (\n        (event &&\n          event.exception &&\n          event.exception.values &&\n          event.exception.values[0] &&\n          event.exception.values[0].type === 'SentryError') ||\n        false\n      );\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: InboundFiltersOptions = {}): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isBlacklistedUrl(event: Event, options: InboundFiltersOptions = {}): boolean {\n    // TODO: Use Glob instead?\n    if (!options.blacklistUrls || !options.blacklistUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.blacklistUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isWhitelistedUrl(event: Event, options: InboundFiltersOptions = {}): boolean {\n    // TODO: Use Glob instead?\n    if (!options.whitelistUrls || !options.whitelistUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.whitelistUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: InboundFiltersOptions = {}): InboundFiltersOptions {\n    return {\n      blacklistUrls: [...(this._options.blacklistUrls || []), ...(clientOptions.blacklistUrls || [])],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n      whitelistUrls: [...(this._options.whitelistUrls || []), ...(clientOptions.whitelistUrls || [])],\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        const frames = event.stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      if (event.exception) {\n        const frames =\n          event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","// tslint:disable:object-literal-sort-keys\n\n/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\n\n/**\n * An object representing a single stack frame.\n * {Object} StackFrame\n * {string} url The JavaScript or HTML file URL.\n * {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * {string[]?} args The arguments passed to the function, if known.\n * {number=} line The line number, if known.\n * {number=} column The column number, if known.\n * {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number | null;\n  column: number | null;\n}\n\n/**\n * An object representing a JavaScript stack trace.\n * {Object} StackTrace\n * {string} name The name of the thrown exception.\n * {string} message The exception error message.\n * {TraceKit.StackFrame[]} stack An array of stack frames.\n */\nexport interface StackTrace {\n  name: string;\n  message: string;\n  mechanism?: string;\n  stack: StackFrame[];\n  failed?: boolean;\n}\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js))(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\n/** JSDoc */\nexport function computeStackTrace(ex: any): StackTrace {\n  // tslint:disable:no-unsafe-any\n\n  let stack = null;\n  const popSize: number = ex && ex.framesToPop;\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true,\n  };\n}\n\n/** JSDoc */\n// tslint:disable-next-line:cyclomatic-complexity\nfunction computeStackTraceFromStackProp(ex: any): StackTrace | null {\n  // tslint:disable:no-conditional-assignment\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  const stack = [];\n  const lines = ex.stack.split('\\n');\n  let isEval;\n  let submatch;\n  let parts;\n  let element;\n\n  for (let i = 0; i < lines.length; ++i) {\n    if ((parts = chrome.exec(lines[i]))) {\n      const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n        parts[3] = submatch[2]; // line\n        parts[4] = submatch[3]; // column\n      }\n      element = {\n        // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n        // prefix here seems like the quickest solution for now.\n        url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = winjs.exec(lines[i]))) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = gecko.exec(lines[i]))) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || `eval`;\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = (ex.columnNumber as number) + 1;\n      }\n      element = {\n        url: parts[3],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null,\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** JSDoc */\nfunction computeStackTraceFromStacktraceProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  }\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace;\n  const opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  const opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  const lines = stacktrace.split('\\n');\n  const stack = [];\n  let parts;\n\n  for (let line = 0; line < lines.length; line += 2) {\n    // tslint:disable:no-conditional-assignment\n    let element = null;\n    if ((parts = opera10Regex.exec(lines[line]))) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null,\n      };\n    } else if ((parts = opera11Regex.exec(lines[line]))) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2],\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace: StackTrace, popSize: number): StackTrace {\n  try {\n    return {\n      ...stacktrace,\n      stack: stacktrace.stack.slice(popSize),\n    };\n  } catch (e) {\n    return stacktrace;\n  }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: any): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { extractExceptionKeysForMessage, isEvent, normalizeToSize } from '@sentry/utils';\n\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  // tslint:disable-next-line:strict-type-predicates\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(exception: {}, syntheticException?: Error, rejection?: boolean): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            rejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column === null ? undefined : frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line === null ? undefined : frame.line,\n      }),\n    )\n    .slice(0, STACKTRACE_LIMIT)\n    .reverse();\n}\n","import { Event } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\n\n/** JSDoc */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  options: {\n    rejection?: boolean;\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    exception = errorEvent.error; // tslint:disable-line:no-parameter-reassignment\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n    // then we just extract the name and message, as they don't provide anything else\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    const domException = exception as DOMException;\n    const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n    const message = domException.message ? `${name}: ${domException.message}` : name;\n\n    event = eventFromString(message, syntheticException, options);\n    addExceptionTypeValue(event, message);\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    const objectException = exception as {};\n    event = eventFromPlainObject(objectException, syntheticException, options.rejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, options);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n// this._options.attachStacktrace\n/** JSDoc */\nexport function eventFromString(\n  input: string,\n  syntheticException?: Error,\n  options: {\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n","import { API } from '@sentry/core';\nimport { Event, Response, Transport, TransportOptions } from '@sentry/types';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public url: string;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  public constructor(public options: TransportOptions) {\n    this.url = new API(this.options.dsn).getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n}\n","import { Event, Response, Status } from '@sentry/types';\nimport { getGlobalObject, logger, parseRetryAfterHeader, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const defaultOptions: RequestInit = {\n      body: JSON.stringify(event),\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n\n    if (this.options.headers !== undefined) {\n      defaultOptions.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(this.url, defaultOptions)\n          .then(response => {\n            const status = Status.fromHttpCode(response.status);\n\n            if (status === Status.Success) {\n              resolve({ status });\n              return;\n            }\n\n            if (status === Status.RateLimit) {\n              const now = Date.now();\n              this._disabledUntil = new Date(now + parseRetryAfterHeader(now, response.headers.get('Retry-After')));\n              logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n            }\n\n            reject(response);\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n","import { Event, Response, Status } from '@sentry/types';\nimport { logger, parseRetryAfterHeader, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = () => {\n          if (request.readyState !== 4) {\n            return;\n          }\n\n          const status = Status.fromHttpCode(request.status);\n\n          if (status === Status.Success) {\n            resolve({ status });\n            return;\n          }\n\n          if (status === Status.RateLimit) {\n            const now = Date.now();\n            this._disabledUntil = new Date(now + parseRetryAfterHeader(now, request.getResponseHeader('Retry-After')));\n            logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n          }\n\n          reject(request);\n        };\n\n        request.open('POST', this.url);\n        for (const header in this.options.headers) {\n          if (this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, this.options.headers[header]);\n          }\n        }\n        request.send(JSON.stringify(event));\n      }),\n    );\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { addExceptionMechanism, supportsFetch, SyncPromise } from '@sentry/utils';\n\nimport { eventFromString, eventFromUnknownInput } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To whitelist certain errors instead, use {@link Options.whitelistUrls}.\n   * By default, all errors will be sent.\n   */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.blacklistUrls}.\n   * By default, all errors will be sent.\n   */\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: any, hint?: EventHint): PromiseLike<Event> {\n    const syntheticException = (hint && hint.syntheticException) || undefined;\n    const event = eventFromUnknownInput(exception, syntheticException, {\n      attachStacktrace: this._options.attachStacktrace,\n    });\n    addExceptionMechanism(event, {\n      handled: true,\n      type: 'generic',\n    });\n    event.level = Severity.Error;\n    if (hint && hint.event_id) {\n      event.event_id = hint.event_id;\n    }\n    return SyncPromise.resolve(event);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    const syntheticException = (hint && hint.syntheticException) || undefined;\n    const event = eventFromString(message, syntheticException, {\n      attachStacktrace: this._options.attachStacktrace,\n    });\n    event.level = level;\n    if (hint && hint.event_id) {\n      event.event_id = hint.event_id;\n    }\n    return SyncPromise.resolve(event);\n  }\n}\n","export const SDK_NAME = 'sentry.javascript.browser';\nexport const SDK_VERSION = '5.13.2';\n","import { API, BaseClient, Scope } from '@sentry/core';\nimport { DsnLike, Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client is disabled');\n      return;\n    }\n\n    const dsn = options.dsn || this.getDsn();\n\n    if (!options.eventId) {\n      logger.error('Missing `eventId` option in showReportDialog call');\n      return;\n    }\n\n    if (!dsn) {\n      logger.error('Missing `Dsn` option in showReportDialog call');\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = new API(dsn).getReportDialogEndpoint(options);\n\n    if (options.onLoad) {\n      script.onload = options.onLoad;\n    }\n\n    (document.head || document.body).appendChild(script);\n  }\n}\n","import { captureException, withScope } from '@sentry/core';\nimport { Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue } from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n): any {\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    // tslint:disable:no-unsafe-any\n    try {\n      // tslint:disable-next-line:strict-type-predicates\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n      // tslint:enable:no-unsafe-any\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: args,\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // tslint:disable-line:no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n  } catch (_oO) {\n    /*no-empty*/\n  }\n\n  return sentryWrapped;\n}\n","import { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  getGlobalObject,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private readonly _global: Window = getGlobalObject();\n\n  /** JSDoc */\n  private _oldOnErrorHandler: OnErrorEventHandler = null;\n\n  /** JSDoc */\n  private _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    const self = this; // tslint:disable-line:no-this-assignment\n    this._oldOnErrorHandler = this._global.onerror;\n\n    this._global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n      const currentHub = getCurrentHub();\n      const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnErrorHandler) {\n          return self._oldOnErrorHandler.apply(this, arguments);\n        }\n        return false;\n      }\n\n      const client = currentHub.getClient();\n      const event = isPrimitive(error)\n        ? self._eventFromIncompleteOnError(msg, url, line, column)\n        : self._enhanceEventWithInitialFrame(\n            eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: false,\n            }),\n            url,\n            line,\n            column,\n          );\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onerror',\n      });\n\n      currentHub.captureEvent(event, {\n        originalException: error,\n      });\n\n      if (self._oldOnErrorHandler) {\n        return self._oldOnErrorHandler.apply(this, arguments);\n      }\n\n      return false;\n    };\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    const self = this; // tslint:disable-line:no-this-assignment\n    this._oldOnUnhandledRejectionHandler = this._global.onunhandledrejection;\n\n    this._global.onunhandledrejection = function(e: any): boolean {\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      const currentHub = getCurrentHub();\n      const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnUnhandledRejectionHandler) {\n          return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n        }\n        return true;\n      }\n\n      const client = currentHub.getClient();\n      const event = isPrimitive(error)\n        ? self._eventFromIncompleteRejection(error)\n        : eventFromUnknownInput(error, undefined, {\n            attachStacktrace: client && client.getOptions().attachStacktrace,\n            rejection: true,\n          });\n\n      event.level = Severity.Error;\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onunhandledrejection',\n      });\n\n      currentHub.captureEvent(event, {\n        originalException: error,\n      });\n\n      if (self._oldOnUnhandledRejectionHandler) {\n        return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n      }\n\n      return true;\n    };\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace that has part of it missing.\n   */\n  private _eventFromIncompleteRejection(error: any): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            value: `Non-Error promise rejection captured with value: ${error}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /** JSDoc */\n  private _ignoreOnError: number = 0;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    return function(this: any, callback: () => void): () => void {\n      return original(\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    const global = getGlobalObject() as { [key: string]: any };\n    const proto = global[target] && global[target].prototype;\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          // tslint:disable-next-line:no-unbound-method strict-type-predicates\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            });\n          }\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        let callback = (fn as any) as WrappedFunction;\n        try {\n          callback = callback && (callback.__sentry_wrapped__ || callback);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, callback, options);\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _wrapXHR(originalSend: () => void): () => void {\n    return function(this: XMLHttpRequest, ...args: any[]): void {\n      const xhr = this; // tslint:disable-line:no-this-assignment\n      const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n      xmlHttpRequestProps.forEach(prop => {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          fill(xhr, prop, function(original: WrappedFunction): Function {\n            const wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: getFunctionName(original),\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            };\n\n            // If Instrument integration has been called before TryCatch, get the name of original function\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__);\n            }\n\n            // Otherwise wrap directly\n            return wrap(original, wrapOptions);\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    this._ignoreOnError = this._ignoreOnError;\n\n    const global = getGlobalObject();\n\n    fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n\n    if ('XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    [\n      'EventTarget',\n      'Window',\n      'Node',\n      'ApplicationCache',\n      'AudioTrackList',\n      'ChannelMergerNode',\n      'CryptoOperation',\n      'EventSource',\n      'FileReader',\n      'HTMLUnknownElement',\n      'IDBDatabase',\n      'IDBRequest',\n      'IDBTransaction',\n      'KeyOperation',\n      'MediaController',\n      'MessagePort',\n      'ModalWindow',\n      'Notification',\n      'SVGElementInstance',\n      'Screen',\n      'TextTrack',\n      'TextTrackCue',\n      'TextTrackList',\n      'WebSocket',\n      'WebSocketWorker',\n      'Worker',\n      'XMLHttpRequest',\n      'XMLHttpRequestEventTarget',\n      'XMLHttpRequestUpload',\n    ].forEach(this._wrapEventTarget.bind(this));\n  }\n}\n","import { API, getCurrentHub } from '@sentry/core';\nimport { Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  logger,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\n\n/**\n * @hidden\n */\nexport interface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n  };\n}\n\n/** JSDoc */\ninterface BreadcrumbIntegrations {\n  console?: boolean;\n  dom?: boolean;\n  fetch?: boolean;\n  history?: boolean;\n  sentry?: boolean;\n  xhr?: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbIntegrations;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: BreadcrumbIntegrations) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: handlerData.xhr.__sentry_xhr__,\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n        },\n      );\n\n      return;\n    }\n\n    // We only capture issued sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      addSentryBreadcrumb(handlerData.args[0]);\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    const client = getCurrentHub().getClient<BrowserClient>();\n    const dsn = client && client.getDsn();\n\n    if (dsn) {\n      const filterUrl = new API(dsn).getStoreEndpoint();\n      // if Sentry key appears in URL, don't capture it as a request\n      // but rather as our own 'sentry' type breadcrumb\n      if (\n        filterUrl &&\n        handlerData.fetchData.url.indexOf(filterUrl) !== -1 &&\n        handlerData.fetchData.method === 'POST' &&\n        handlerData.args[1] &&\n        handlerData.args[1].body\n      ) {\n        addSentryBreadcrumb(handlerData.args[1].body);\n        return;\n      }\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      // tslint:disable-next-line:no-parameter-reassignment\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      // tslint:disable-next-line:no-parameter-reassignment\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n}\n\n/**\n * Create a breadcrumb of `sentry` from the events themselves\n */\nfunction addSentryBreadcrumb(serializedData: string): void {\n  // There's always something that can go wrong with deserialization...\n  try {\n    const event = JSON.parse(serializedData);\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level || Severity.fromString('error'),\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  } catch (_oO) {\n    logger.error('Error while adding sentry type breadcrumb');\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        if (!global.navigator || !global.location) {\n          return event;\n        }\n\n        // Request Interface: https://docs.sentry.io/development/sdk-dev/event-payloads/request/\n        const request = event.request || {};\n        request.url = request.url || global.location.href;\n        request.headers = request.headers || {};\n        request.headers['User-Agent'] = global.navigator.userAgent;\n\n        return {\n          ...event,\n          request,\n        };\n      }\n      return event;\n    });\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient, ReportDialogOptions } from './client';\nimport { wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  initAndBind(BrowserClient, options);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\nexport function wrap(fn: Function): any {\n  return internalWrap(fn)(); // tslint:disable-line:no-unsafe-any\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\n// tslint:disable: no-unsafe-any\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n// tslint:enable: no-unsafe-any\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instanciate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  getCurrentHub().bindClient(new clientClass(options));\n}\n"],"names":["LogLevel","Severity","SpanStatus","Status","level","Debug","Info","Warning","Error","Fatal","Critical","Log","httpStatus","Ok","Unauthenticated","PermissionDenied","NotFound","AlreadyExists","FailedPrecondition","ResourceExhausted","InvalidArgument","Unimplemented","Unavailable","DeadlineExceeded","InternalError","UnknownError","code","Success","RateLimit","Invalid","Failed","Unknown","setPrototypeOf","Object","__proto__","Array","obj","proto","prop","hasOwnProperty","SentryError","[object Object]","message","super","this","name","prototype","constructor","isError","wat","toString","call","isInstanceOf","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isElement","Element","isThenable","Boolean","then","base","_e","truncate","str","max","length","substr","safeJoin","input","delimiter","isArray","output","i","value","push","String","e","join","isMatchingPattern","pattern","test","indexOf","isNodeEnv","process","fallbackGlobalObject","getGlobalObject","global","window","self","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","replace","c","r","Math","random","parseUrl","url","match","query","fragment","host","path","protocol","relative","getEventDescription","event","exception","values","type","event_id","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","__sentry_original__","result","keys","addExceptionTypeValue","addExceptionMechanism","mechanism","key","_oO","htmlTreeAsString","elem","currentElem","MAX_TRAVERSE_HEIGHT","MAX_OUTPUT_LEN","out","height","len","separator","sepLength","nextStr","_htmlElementAsString","parentNode","reverse","el","className","classes","attr","tagName","toLowerCase","id","split","attrWhitelist","getAttribute","timestampWithMs","Date","now","defaultRetryAfter","parseRetryAfterHeader","header","headerDelay","parseInt","isNaN","headerDate","parse","defaultFunctionName","getFunctionName","fn","PREFIX","__SENTRY__","logger","_enabled","args","log","warn","error","Memo","_hasWeakSet","WeakSet","_inner","has","add","delete","splice","fill","source","replacement","original","wrapped","defineProperties","enumerable","_Oo","getWalkSource","err","stack","target","currentTarget","CustomEvent","detail","jsonSize","encodeURI","utf8Length","JSON","stringify","normalizeToSize","object","depth","maxSize","serialized","normalize","normalizeValue","_events","document","walk","Infinity","memo","normalized","serializeValue","toJSON","acc","memoize","innerKey","unmemoize","extractExceptionKeysForMessage","maxLength","sort","includedKeys","slice","States","SyncPromise","executor","PENDING","_setResult","RESOLVED","reason","REJECTED","state","_state","_resolve","_reject","_value","_executeHandlers","handler","_handlers","concat","onrejected","onfulfilled","resolve","_","reject","collection","TypeError","counter","resolvedCollection","item","index","_attachHandler","val","onfinally","isRejected","PromiseBuffer","_limit","undefined","task","isReady","_buffer","remove","timeout","capturedSetTimeout","setTimeout","all","clearTimeout","supportsFetch","Headers","Request","Response","isNativeFetch","func","supportsReferrerPolicy","referrerPolicy","handlers","instrumented","instrument","originalConsoleLevel","triggerHandlers","Function","apply","instrumentConsole","addEventListener","domEventHandler","bind","keypressEventHandler","eventName","options","handleEvent","innerOriginal","__sentry_wrapped__","instrumentDOM","xhrproto","XMLHttpRequest","originalOpen","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","originalSend","xhr","commonHandlerData","startTimestamp","readyState","status_code","status","endTimestamp","instrumentXHR","fetch","doc","sandbox","createElement","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","fetchData","getFetchMethod","getFetchUrl","response","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","from","lastHref","to","location","href","instrumentHistory","addInstrumentationHandler","data","fetchArgs","debounceDuration","keypressTimeout","lastCapturedEvent","debounceTimer","debounce","isContentEditable","DSN_REGEX","ERROR_MESSAGE","Dsn","_fromString","_fromComponents","_validate","withPassword","pass","port","projectId","user","exec","lastPath","pop","components","component","Scope","_scopeListeners","_eventProcessors","_notifyingListeners","processors","hint","processor","final","_notifyEventProcessors","_user","_notifyScopeListeners","tags","_tags","extras","_extra","extra","fingerprint","_fingerprint","_level","transaction","_transaction","_span","context","_context","span","scope","newScope","_breadcrumbs","breadcrumb","maxBreadcrumbs","mergedBreadcrumb","timestamp","contexts","_applyFingerprint","breadcrumbs","getGlobalEventProcessors","globalEventProcessors","addGlobalEventProcessor","API_VERSION","DEFAULT_BREADCRUMBS","MAX_BREADCRUMBS","Hub","client","_version","_stack","top","getStackTop","version","getStack","parentScope","clone","getClient","pushScope","popScope","eventId","_lastEventId","finalHint","syntheticException","originalException","_invokeClient","beforeBreadcrumb","getOptions","finalBreadcrumb","addBreadcrumb","min","setUser","setTags","setExtras","setTag","setExtra","setContext","oldHub","makeMain","integration","getIntegration","spanOrSpanContext","forceNoChild","_callExtensionMethod","sentry","getMainCarrier","extensions","carrier","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","hasHubOnCarrier","isOlderThan","domain","mod","module","request","require","activeDomain","active","registryHubTopStack","getHubFromActiveDomain","callOnHub","captureException","withScope","SENTRY_API_VERSION","API","dsn","_dsnObject","_getBaseUrl","getStoreEndpointPath","auth","sentry_key","sentry_version","getStoreEndpoint","map","encodeURIComponent","clientName","clientVersion","Content-Type","X-Sentry-Auth","dialogOptions","endpoint","encodedOptions","email","installedIntegrations","setupIntegrations","integrations","defaultIntegrations","userIntegrations","userIntegrationsNames","pickedIntegrationsNames","defaultIntegration","userIntegration","integrationsNames","getIntegrationsToSetup","setupOnce","setupIntegration","BaseClient","backendClass","_backend","_options","_dsn","_isEnabled","_integrations","_processing","_getBackend","eventFromException","_processEvent","finalEvent","eventFromMessage","_isClientProcessing","clearInterval","interval","getTransport","close","transportFlushed","ready","flush","enabled","ticked","setInterval","environment","release","dist","maxValueLength","normalizeDepth","prepared","_addIntegrations","sdk","applyToEvent","evt","_normalizeEvent","b","sdkInfo","integrationsArray","beforeSend","sampleRate","_prepareEvent","__sentry__","sendEvent","beforeSendResult","_handleAsyncBeforeSend","processedEvent","NoopTransport","Skipped","BaseBackend","_transport","_setupTransport","_exception","_hint","_message","originalFunctionToString","FunctionToString","DEFAULT_IGNORE_ERRORS","InboundFilters","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isBlacklistedUrl","_getEventFilterUrl","_isWhitelistedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","blacklistUrls","whitelistUrls","oO","stacktrace","frames","filename","UNKNOWN_FUNCTION","gecko","winjs","geckoEval","chromeEval","computeStackTrace","ex","popSize","framesToPop","opera10Regex","opera11Regex","lines","parts","line","element","column","extractMessage","computeStackTraceFromStacktraceProp","popFrames","isEval","submatch","isNative","columnNumber","computeStackTraceFromStackProp","failed","STACKTRACE_LIMIT","exceptionFromStacktrace","prepareFramesForEvent","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","frame","colno","function","in_app","lineno","eventFromUnknownInput","domException","eventFromString","rejection","__serialized__","eventFromPlainObject","synthetic","attachStacktrace","BaseTransport","getStoreEndpointWithUrlEncodedAuth","drain","FetchTransport","_disabledUntil","Promise","defaultOptions","body","headers","fromHttpCode","get","catch","XHRTransport","onreadystatechange","getResponseHeader","open","setRequestHeader","send","BrowserBackend","transportOptions","transport","handled","SDK_NAME","SDK_VERSION","BrowserClient","platform","packages","getDsn","script","async","src","getReportDialogEndpoint","onLoad","onload","ignoreOnError","shouldIgnoreOnError","wrap","before","sentryWrapped","arguments","wrappedArguments","arg","addEventProcessor","property","defineProperty","getOwnPropertyDescriptor","configurable","GlobalHandlers","onerror","onunhandledrejection","stackTraceLimit","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","_onErrorHandlerInstalled","_oldOnErrorHandler","_global","msg","currentHub","hasIntegration","isFailedOwnDelivery","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","captureEvent","_onUnhandledRejectionHandlerInstalled","_oldOnUnhandledRejectionHandler","_eventFromIncompleteRejection","ERROR_TYPES_RE","groups","getLocationHref","TryCatch","originalCallback","wrapOptions","_ignoreOnError","_wrapTimeFunction","_wrapRAF","_wrapXHR","_wrapEventTarget","Breadcrumbs","dom","handlerData","category","fromString","addSentryBreadcrumb","filterUrl","parsedLoc","parsedFrom","parsedTo","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","serializedData","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","_key","limit","_handler","linkedErrors","_walkErrorTree","UserAgent","navigator","userAgent","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","SENTRY_RELEASE","clientClass","debug","enable","bindClient","initAndBind","lastEventId","showReportDialog","internalWrap"],"mappings":"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"}