{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../../src/integrations/tracing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventProcessor, Hub, Integration, Span, SpanContext, SpanStatus } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getGlobalObject,\n  isMatchingPattern,\n  logger,\n  supportsNativeFetch,\n} from '@sentry/utils';\n\nimport { Span as SpanClass } from '../span';\n\n/**\n * Options for Tracing integration\n */\ninterface TracingOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//]\n   */\n  tracingOrigins: Array<string | RegExp>;\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest(url: string): boolean;\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 500\n   */\n  idleTimeout: number;\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes. Useful for react applications with\n   * a router.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n  /**\n   * Sample to determine if the Integration should instrument anything. The decision will be taken once per load\n   * on initalization.\n   * 0 = 0% chance of instrumenting\n   * 1 = 100% change of instrumenting\n   *\n   * Default: 1\n   */\n  tracesSampleRate: number;\n\n  /**\n   * The maximum duration of a transaction before it will be discarded. This is for some edge cases where a browser\n   * completely freezes the JS state and picks it up later (background tabs).\n   * So after this duration, the SDK will not send the event.\n   * If you want to have an unlimited duration set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag to discard all spans that occur in background. This includes transactions. Browser background tab timing is\n   * not suited towards doing precise measurements of operations. That's why this option discards any active transaction\n   * and also doesn't add any spans that happen in the background. Background spans/transaction can mess up your\n   * statistics in non deterministic ways that's why we by default recommend leaving this opition enabled.\n   *\n   * Default: true\n   */\n  discardBackgroundSpans: boolean;\n}\n\n/** JSDoc */\ninterface Activity {\n  name: string;\n  span?: Span;\n}\n\nconst global = getGlobalObject<Window>();\nconst defaultTracingOrigins = ['localhost', /^\\//];\n\n/**\n * Tracing Integration\n */\nexport class Tracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Tracing.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Tracing';\n\n  /**\n   * Is Tracing enabled, this will be determined once per pageload.\n   */\n  private static _enabled?: boolean;\n\n  /** JSDoc */\n  public static options: TracingOptions;\n\n  /**\n   * Returns current hub.\n   */\n  private static _getCurrentHub?: () => Hub;\n\n  private static _activeTransaction?: Span;\n\n  private static _currentIndex: number = 1;\n\n  public static _activities: { [key: number]: Activity } = {};\n\n  private static _debounce: number = 0;\n\n  private readonly _emitOptionsWarning: boolean = false;\n\n  /**\n   * Constructor for Tracing\n   *\n   * @param _options TracingOptions\n   */\n  public constructor(_options?: Partial<TracingOptions>) {\n    const defaults = {\n      discardBackgroundSpans: true,\n      idleTimeout: 500,\n      maxTransactionDuration: 600,\n      shouldCreateSpanForRequest(url: string): boolean {\n        const origins = (_options && _options.tracingOrigins) || defaultTracingOrigins;\n        return (\n          origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n          !isMatchingPattern(url, 'sentry_key')\n        );\n      },\n      startTransactionOnLocationChange: true,\n      traceFetch: true,\n      traceXHR: true,\n      tracesSampleRate: 1,\n      tracingOrigins: defaultTracingOrigins,\n    };\n    // NOTE: Logger doesn't work in contructors, as it's initialized after integrations instances\n    if (!_options || !Array.isArray(_options.tracingOrigins) || _options.tracingOrigins.length === 0) {\n      this._emitOptionsWarning = true;\n    }\n    Tracing.options = {\n      ...defaults,\n      ..._options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    Tracing._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn(\n        '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n      );\n      logger.warn(`[Tracing] We added a reasonable default for you: ${defaultTracingOrigins}`);\n    }\n\n    if (!Tracing._isEnabled()) {\n      return;\n    }\n\n    if (Tracing.options.traceXHR) {\n      addInstrumentationHandler({\n        callback: xhrCallback,\n        type: 'xhr',\n      });\n    }\n\n    if (Tracing.options.traceFetch && supportsNativeFetch()) {\n      addInstrumentationHandler({\n        callback: fetchCallback,\n        type: 'fetch',\n      });\n    }\n\n    if (Tracing.options.startTransactionOnLocationChange) {\n      addInstrumentationHandler({\n        callback: historyCallback,\n        type: 'history',\n      });\n    }\n\n    if (global.location && global.location.href) {\n      // `${global.location.href}` will be used a temp transaction name\n      Tracing.startIdleTransaction(global.location.href, {\n        op: 'pageload',\n        sampled: true,\n      });\n    }\n\n    if (Tracing.options.discardBackgroundSpans && global.document) {\n      document.addEventListener('visibilitychange', () => {\n        if (document.hidden && Tracing._activeTransaction) {\n          logger.log('[Tracing] Discarded active transaction incl. activities since tab moved to the background');\n          Tracing._activeTransaction = undefined;\n          Tracing._activities = {};\n        }\n      });\n    }\n\n    // This EventProcessor makes sure that the transaction is not longer than maxTransactionDuration\n    addGlobalEventProcessor((event: Event) => {\n      const self = getCurrentHub().getIntegration(Tracing);\n      if (!self) {\n        return event;\n      }\n\n      if (Tracing._isEnabled()) {\n        const isOutdatedTransaction =\n          event.timestamp &&\n          event.start_timestamp &&\n          (event.timestamp - event.start_timestamp > Tracing.options.maxTransactionDuration ||\n            event.timestamp - event.start_timestamp < 0);\n\n        if (Tracing.options.maxTransactionDuration !== 0 && event.type === 'transaction' && isOutdatedTransaction) {\n          return null;\n        }\n      }\n\n      return event;\n    });\n  }\n\n  /**\n   * Is tracing enabled\n   */\n  private static _isEnabled(): boolean {\n    if (Tracing._enabled !== undefined) {\n      return Tracing._enabled;\n    }\n    // This happens only in test cases where the integration isn't initalized properly\n    // tslint:disable-next-line: strict-type-predicates\n    if (!Tracing.options || typeof Tracing.options.tracesSampleRate !== 'number') {\n      return false;\n    }\n    Tracing._enabled = Math.random() > Tracing.options.tracesSampleRate ? false : true;\n    return Tracing._enabled;\n  }\n\n  /**\n   * Starts a Transaction waiting for activity idle to finish\n   */\n  public static startIdleTransaction(name: string, spanContext?: SpanContext): Span | undefined {\n    if (!Tracing._isEnabled()) {\n      // Tracing is not enabled\n      return undefined;\n    }\n\n    // If we already have an active transaction it means one of two things\n    // a) The user did rapid navigation changes and didn't wait until the transaction was finished\n    // b) A activity wasn't popped correctly and therefore the transaction is stalling\n    Tracing.finishIdleTransaction();\n\n    logger.log('[Tracing] startIdleTransaction, name:', name);\n\n    const _getCurrentHub = Tracing._getCurrentHub;\n    if (!_getCurrentHub) {\n      return undefined;\n    }\n\n    const hub = _getCurrentHub();\n    if (!hub) {\n      return undefined;\n    }\n\n    const span = hub.startSpan(\n      {\n        ...spanContext,\n        transaction: name,\n      },\n      true,\n    );\n\n    Tracing._activeTransaction = span;\n\n    // We need to do this workaround here and not use configureScope\n    // Reason being at the time we start the inital transaction we do not have a client bound on the hub yet\n    // therefore configureScope wouldn't be executed and we would miss setting the transaction\n    // tslint:disable-next-line: no-unsafe-any\n    (hub as any).getScope().setSpan(span);\n\n    // The reason we do this here is because of cached responses\n    // If we start and transaction without an activity it would never finish since there is no activity\n    const id = Tracing.pushActivity('idleTransactionStarted');\n    setTimeout(() => {\n      Tracing.popActivity(id);\n    }, (Tracing.options && Tracing.options.idleTimeout) || 100);\n\n    return span;\n  }\n\n  /**\n   * Update transaction\n   * @deprecated\n   */\n  public static updateTransactionName(name: string): void {\n    logger.log('[Tracing] DEPRECATED, use Sentry.configureScope => scope.setTransaction instead', name);\n    const _getCurrentHub = Tracing._getCurrentHub;\n    if (_getCurrentHub) {\n      const hub = _getCurrentHub();\n      if (hub) {\n        hub.configureScope(scope => {\n          scope.setTransaction(name);\n        });\n      }\n    }\n  }\n\n  /**\n   * Finshes the current active transaction\n   */\n  public static finishIdleTransaction(): void {\n    const active = Tracing._activeTransaction as SpanClass;\n    if (active) {\n      logger.log('[Tracing] finishIdleTransaction', active.transaction);\n      // true = use timestamp of last span\n      active.finish(true);\n    }\n  }\n\n  /**\n   * Sets the status of the current active transaction (if there is one)\n   */\n  public static setTransactionStatus(status: SpanStatus): void {\n    const active = Tracing._activeTransaction;\n    if (active) {\n      logger.log('[Tracing] setTransactionStatus', status);\n      active.setStatus(status);\n    }\n  }\n\n  /**\n   * Starts tracking for a specifc activity\n   *\n   * @param name Name of the activity, can be any string (Only used internally to identify the activity)\n   * @param spanContext If provided a Span with the SpanContext will be created.\n   * @param options _autoPopAfter_ | Time in ms, if provided the activity will be popped automatically after this timeout. This can be helpful in cases where you cannot gurantee your application knows the state and calls `popActivity` for sure.\n   */\n  public static pushActivity(\n    name: string,\n    spanContext?: SpanContext,\n    options?: {\n      autoPopAfter?: number;\n    },\n  ): number {\n    if (!Tracing._isEnabled()) {\n      // Tracing is not enabled\n      return 0;\n    }\n    if (!Tracing._activeTransaction) {\n      logger.log(`[Tracing] Not pushing activity ${name} since there is no active transaction`);\n      return 0;\n    }\n\n    // We want to clear the timeout also here since we push a new activity\n    clearTimeout(Tracing._debounce);\n\n    const _getCurrentHub = Tracing._getCurrentHub;\n    if (spanContext && _getCurrentHub) {\n      const hub = _getCurrentHub();\n      if (hub) {\n        Tracing._activities[Tracing._currentIndex] = {\n          name,\n          span: hub.startSpan(spanContext),\n        };\n      }\n    } else {\n      Tracing._activities[Tracing._currentIndex] = {\n        name,\n      };\n    }\n\n    logger.log(`[Tracing] pushActivity: ${name}#${Tracing._currentIndex}`);\n    logger.log('[Tracing] activies count', Object.keys(Tracing._activities).length);\n    if (options && typeof options.autoPopAfter === 'number') {\n      logger.log(`[Tracing] auto pop of: ${name}#${Tracing._currentIndex} in ${options.autoPopAfter}ms`);\n      const index = Tracing._currentIndex;\n      setTimeout(() => {\n        Tracing.popActivity(index, {\n          autoPop: true,\n          status: SpanStatus.DeadlineExceeded,\n        });\n      }, options.autoPopAfter);\n    }\n    return Tracing._currentIndex++;\n  }\n\n  /**\n   * Removes activity and finishes the span in case there is one\n   */\n  public static popActivity(id: number, spanData?: { [key: string]: any }): void {\n    // The !id is on purpose to also fail with 0\n    // Since 0 is returned by push activity in case tracing is not enabled\n    // or there is no active transaction\n    if (!Tracing._isEnabled() || !id) {\n      // Tracing is not enabled\n      return;\n    }\n\n    const activity = Tracing._activities[id];\n\n    if (activity) {\n      logger.log(`[Tracing] popActivity ${activity.name}#${id}`);\n      const span = activity.span;\n      if (span) {\n        if (spanData) {\n          Object.keys(spanData).forEach((key: string) => {\n            span.setData(key, spanData[key]);\n            if (key === 'status_code') {\n              span.setHttpStatus(spanData[key] as number);\n            }\n            if (key === 'status') {\n              span.setStatus(spanData[key] as SpanStatus);\n            }\n          });\n        }\n        span.finish();\n      }\n      // tslint:disable-next-line: no-dynamic-delete\n      delete Tracing._activities[id];\n    }\n\n    const count = Object.keys(Tracing._activities).length;\n    clearTimeout(Tracing._debounce);\n\n    logger.log('[Tracing] activies count', count);\n\n    if (count === 0 && Tracing._activeTransaction) {\n      const timeout = Tracing.options && Tracing.options.idleTimeout;\n      logger.log(`[Tracing] Flushing Transaction in ${timeout}ms`);\n      Tracing._debounce = (setTimeout(() => {\n        Tracing.finishIdleTransaction();\n      }, timeout) as any) as number;\n    }\n  }\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction xhrCallback(handlerData: { [key: string]: any }): void {\n  if (!Tracing.options.traceXHR) {\n    return;\n  }\n\n  // tslint:disable-next-line: no-unsafe-any\n  if (!handlerData || !handlerData.xhr || !handlerData.xhr.__sentry_xhr__) {\n    return;\n  }\n\n  // tslint:disable: no-unsafe-any\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  if (!Tracing.options.shouldCreateSpanForRequest(xhr.url)) {\n    return;\n  }\n\n  // We only capture complete, non-sentry requests\n  if (handlerData.xhr.__sentry_own_request__) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_activity_id__) {\n    Tracing.popActivity(handlerData.xhr.__sentry_xhr_activity_id__, handlerData.xhr.__sentry_xhr__);\n    return;\n  }\n\n  handlerData.xhr.__sentry_xhr_activity_id__ = Tracing.pushActivity('xhr', {\n    data: {\n      ...xhr.data,\n      type: 'xhr',\n    },\n    description: `${xhr.method} ${xhr.url}`,\n    op: 'http',\n  });\n\n  // Adding the trace header to the span\n  const activity = Tracing._activities[handlerData.xhr.__sentry_xhr_activity_id__];\n  if (activity) {\n    const span = activity.span;\n    if (span && handlerData.xhr.setRequestHeader) {\n      handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n    }\n  }\n  // tslint:enable: no-unsafe-any\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction fetchCallback(handlerData: { [key: string]: any }): void {\n  // tslint:disable: no-unsafe-any\n  if (!Tracing.options.traceFetch) {\n    return;\n  }\n\n  if (!Tracing.options.shouldCreateSpanForRequest(handlerData.fetchData.url)) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__activity) {\n    Tracing.popActivity(handlerData.fetchData.__activity, handlerData.fetchData);\n  } else {\n    handlerData.fetchData.__activity = Tracing.pushActivity('fetch', {\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http',\n    });\n\n    const activity = Tracing._activities[handlerData.fetchData.__activity];\n    if (activity) {\n      const span = activity.span;\n      if (span) {\n        const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n        if (options.headers) {\n          if (Array.isArray(options.headers)) {\n            options.headers = [...options.headers, { 'sentry-trace': span.toTraceparent() }];\n          } else {\n            options.headers = {\n              ...options.headers,\n              'sentry-trace': span.toTraceparent(),\n            };\n          }\n        } else {\n          options.headers = { 'sentry-trace': span.toTraceparent() };\n        }\n      }\n    }\n  }\n  // tslint:enable: no-unsafe-any\n}\n\n/**\n * Creates transaction from navigation changes\n */\nfunction historyCallback(_: { [key: string]: any }): void {\n  if (Tracing.options.startTransactionOnLocationChange && global && global.location) {\n    Tracing.startIdleTransaction(global.location.href, {\n      op: 'navigation',\n      sampled: true,\n    });\n  }\n}\n"]}